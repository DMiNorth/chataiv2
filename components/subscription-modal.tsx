"use client"

import { useState } from "react"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Check, X, Crown, Star, Zap } from "lucide-react"
import { useTheme } from "@/hooks/use-theme"
import { useNotifications } from "@/components/notification-system"

interface SubscriptionModalProps {
  isOpen: boolean
  onClose: () => void
}

export default function SubscriptionModal({ isOpen, onClose }: SubscriptionModalProps) {
  const [selectedPlan, setSelectedPlan] = useState<string | null>(null)
  const { actualTheme } = useTheme()
  const isDark = actualTheme === "dark"
  const { showSuccess } = useNotifications()

  const plans = [
    {
      id: "basic",
      name: "–ë–∞–∑–æ–≤–∞—è",
      price: "1000‚ÇΩ",
      period: "/–º–µ—Å",
      icon: Star,
      color: "from-[#34C759] to-[#0088CC]",
      description: "–î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π",
      features: [
        "–ë–∞–∑–æ–≤—ã–π SWOT-–∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        "–î–æ 5 AI-–ø–æ—Å—Ç–æ–≤ –≤ –º–µ—Å—è—Ü",
        "–ü–ª–∞–Ω —Ä–æ—Å—Ç–∞ (–¥–æ 5 —à–∞–≥–æ–≤)",
        "–ú–∏–∫—Ä–æ–æ–±—É—á–µ–Ω–∏–µ –≤ —á–∞—Ç–µ",
        "–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥",
        "–û–ø—Ä–æ—Å—ã (–¥–æ 3/–º–µ—Å.)",
        "–î–æ—Å—Ç—É–ø –∫ mini app (–ª–∏—á–Ω—ã–π —á–∞—Ç)",
      ],
      limitations: [
        "–ù–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π",
        "–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Ä–æ—Å—Ç–∞",
        "–ù–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
        "–ù–µ—Ç –±—Ä–µ–Ω–¥-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
        "–ù–µ—Ç AI –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤",
      ],
    },
    {
      id: "advanced",
      name: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è",
      price: "2500‚ÇΩ",
      period: "/–º–µ—Å",
      icon: Zap,
      color: "from-[#FF9500] to-[#34C759]",
      description: "–î–ª—è –º–∞–ª–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
      popular: true,
      features: [
        "–í—Å—ë –∏–∑ –ë–∞–∑–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
        "SWOT —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏",
        "–ü—Ä–æ–≥–Ω–æ–∑—ã —Ä–æ—Å—Ç–∞ (–¥–æ 3/–º–µ—Å.)",
        "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (–¥–æ 3/–º–µ—Å.)",
        "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: Google Analytics, –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞, 1 CRM",
        "–ü–ª–∞–Ω —Ä–æ—Å—Ç–∞ (–¥–æ 10 —à–∞–≥–æ–≤)",
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ (–¥–æ 10/–º–µ—Å.)",
        "–í–æ—Ä–æ–Ω–∫–∏ (–¥–æ 3 —ç—Ç–∞–ø–æ–≤)",
        "AI-–∫–æ–Ω—Ç–µ–Ω—Ç (–¥–æ 15 –ø–æ—Å—Ç–æ–≤/–º–µ—Å.)",
        "–ê—É–¥–∏–æ–æ—Ç–≤–µ—Ç—ã",
        "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã",
      ],
      limitations: ["–ù–µ—Ç AI-–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫–∞", "–ù–µ—Ç –±—Ä–µ–Ω–¥-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"],
    },
    {
      id: "premium",
      name: "–ü—Ä–µ–º–∏—É–º",
      price: "5000‚ÇΩ",
      period: "/–º–µ—Å",
      icon: Crown,
      color: "from-[#0088CC] to-[#FF9500]",
      description: "–î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π –∏ –∫–æ–º–ø–∞–Ω–∏–π",
      features: [
        "–í—Å—ë –∏–∑ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
        "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã",
        "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ª—é–±—ã–º–∏ CRM, SimilarWeb",
        "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏",
        "–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–æ—Ä–æ–Ω–æ–∫ –∏ –∑–∞–¥–∞—á",
        "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç",
        "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—Ä–µ–Ω–¥–∞ (Telegram, X –∏ –¥—Ä.)",
        "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏, –ø–æ—Å—Ç—ã, —Ä–æ–∑—ã–≥—Ä—ã—à–∏",
        "AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤",
        "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π, –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
      ],
      limitations: [],
    },
  ]

  const handleSubscribe = (planId: string) => {
    setSelectedPlan(planId)
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã
    setTimeout(() => {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
      showSuccess("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", `–ü–æ–¥–ø–∏—Å–∫–∞ "${plans.find((p) => p.id === planId)?.name}" —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!`)
      onClose()
      setSelectedPlan(null)
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    }, 1000)
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent
        className={`max-w-5xl max-h-[85vh] overflow-y-auto theme-transition ${
          isDark ? "bg-gray-800 border-gray-700 text-white" : "bg-white border-gray-200"
        }`}
      >
        <DialogHeader>
          <DialogTitle
            className={`text-xl font-bold text-center mb-3 theme-transition ${isDark ? "text-white" : "text-gray-900"}`}
          >
            üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É
          </DialogTitle>
        </DialogHeader>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {plans.map((plan) => {
            const Icon = plan.icon
            return (
              <div
                key={plan.id}
                className={`relative p-4 rounded-xl border-2 transition-all duration-300 theme-transition ${
                  plan.popular
                    ? "border-[#FF9500] bg-gradient-to-b from-[#FF9500]/5 to-transparent"
                    : isDark
                      ? "border-gray-600 hover:border-gray-500 bg-gray-700/50"
                      : "border-gray-200 hover:border-gray-300 bg-white"
                } hover:shadow-lg`}
              >
                {plan.popular && (
                  <Badge className="absolute -top-2 left-1/2 transform -translate-x-1/2 bg-[#FF9500] text-white px-3 py-1 text-xs">
                    –ü–æ–ø—É–ª—è—Ä–Ω—ã–π
                  </Badge>
                )}

                <div className="text-center mb-4">
                  <div
                    className={`w-12 h-12 bg-gradient-to-br ${plan.color} rounded-xl flex items-center justify-center mx-auto mb-3 shadow-lg`}
                  >
                    <Icon className="w-6 h-6 text-white" />
                  </div>
                  <h3 className={`text-lg font-bold mb-1 theme-transition ${isDark ? "text-white" : "text-gray-900"}`}>
                    {plan.name}
                  </h3>
                  <p className={`text-xs mb-3 theme-transition ${isDark ? "text-gray-300" : "text-gray-600"}`}>
                    {plan.description}
                  </p>
                  <div className="flex items-baseline justify-center">
                    <span className="text-2xl font-bold text-gray-900">{plan.price}</span>
                    <span className="text-gray-600 ml-1 text-sm">{plan.period}</span>
                  </div>
                </div>

                <div className="space-y-3 mb-4">
                  <div>
                    <h4 className="font-semibold text-gray-900 mb-2 flex items-center text-sm">
                      <Check className="w-3 h-3 text-[#34C759] mr-1" />
                      –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
                    </h4>
                    <ul className="space-y-1">
                      {plan.features.slice(0, 4).map((feature, index) => (
                        <li key={index} className="flex items-start text-xs text-gray-700">
                          <Check className="w-3 h-3 text-[#34C759] mr-1 mt-0.5 flex-shrink-0" />
                          {feature}
                        </li>
                      ))}
                      {plan.features.length > 4 && (
                        <li className="text-xs text-gray-500 italic">
                          +{plan.features.length - 4} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                        </li>
                      )}
                    </ul>
                  </div>

                  {plan.limitations.length > 0 && (
                    <div>
                      <h4 className="font-semibold text-gray-900 mb-2 flex items-center text-sm">
                        <X className="w-3 h-3 text-red-500 mr-1" />
                        –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
                      </h4>
                      <ul className="space-y-1">
                        {plan.limitations.slice(0, 2).map((limitation, index) => (
                          <li key={index} className="flex items-start text-xs text-gray-600">
                            <X className="w-3 h-3 text-red-500 mr-1 mt-0.5 flex-shrink-0" />
                            {limitation}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>

                <Button
                  onClick={() => handleSubscribe(plan.id)}
                  disabled={selectedPlan === plan.id}
                  className={`w-full bg-gradient-to-r ${plan.color} hover:opacity-90 transition-all duration-300 shadow-lg hover:shadow-xl text-sm`}
                >
                  {selectedPlan === plan.id ? "–û—Ñ–æ—Ä–º–ª—è–µ–º..." : "–í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω"}
                </Button>
              </div>
            )
          })}
        </div>
      </DialogContent>
    </Dialog>
  )
}
