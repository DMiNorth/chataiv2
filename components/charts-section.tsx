"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { useEffect, useRef } from "react"
import { useTheme } from "@/hooks/use-theme"

export default function ChartsSection() {
  const { actualTheme } = useTheme()
  const lineChartRef = useRef<HTMLCanvasElement>(null)
  const isDark = actualTheme === "dark"

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  const lineData = [
    { month: "–Ø–Ω–≤", value: 65, label: "–ü—Ä–æ–¥–∞–∂–∏: 65%" },
    { month: "–§–µ–≤", value: 78, label: "–ü—Ä–æ–¥–∞–∂–∏: 78%" },
    { month: "–ú–∞—Ä", value: 82, label: "–ü—Ä–æ–¥–∞–∂–∏: 82%" },
    { month: "–ê–ø—Ä", value: 75, label: "–ü—Ä–æ–¥–∞–∂–∏: 75%" },
    { month: "–ú–∞–π", value: 90, label: "–ü—Ä–æ–¥–∞–∂–∏: 90%" },
    { month: "–ò—é–Ω", value: 95, label: "–ü—Ä–æ–¥–∞–∂–∏: 95%" },
  ]

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
  const pieData = [
    { label: "–ü—Ä–æ–¥–∞–∂–∏", value: 45, color: "#0088CC" },
    { label: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", value: 30, color: "#34C759" },
    { label: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞", value: 25, color: "#FF9500" },
  ]

  useEffect(() => {
    const canvas = lineChartRef.current
    if (!canvas) return

    const ctx = canvas.getContext("2d")
    if (!ctx) return

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ canvas
    const width = (canvas.width = canvas.offsetWidth * 2)
    const height = (canvas.height = canvas.offsetHeight * 2)
    ctx.scale(2, 2)

    const chartWidth = canvas.offsetWidth - 80
    const chartHeight = canvas.offsetHeight - 80
    const startX = 40
    const startY = canvas.offsetHeight - 40

    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight)

    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const maxValue = Math.max(...lineData.map((d) => d.value))
    const minValue = Math.min(...lineData.map((d) => d.value)) - 10
    const valueRange = maxValue - minValue

    // –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π/—Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
    const gridColor = isDark ? "#374151" : "#e5e7eb"
    const textColor = isDark ? "#9ca3af" : "#6b7280"
    const lineColor = "#0088CC"
    const pointColor = "#34C759"

    // –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É
    ctx.strokeStyle = gridColor
    ctx.lineWidth = 1

    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏
    for (let i = 0; i <= 5; i++) {
      const y = startY - (chartHeight / 5) * i
      ctx.beginPath()
      ctx.moveTo(startX, y)
      ctx.lineTo(startX + chartWidth, y)
      ctx.stroke()

      // –ü–æ–¥–ø–∏—Å–∏ –ø–æ Y
      ctx.fillStyle = textColor
      ctx.font = "12px Arial"
      ctx.textAlign = "right"
      const value = Math.round(minValue + (valueRange / 5) * i)
      ctx.fillText(`${value}%`, startX - 10, y + 4)
    }

    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏
    lineData.forEach((_, index) => {
      const x = startX + (chartWidth / (lineData.length - 1)) * index
      ctx.strokeStyle = gridColor
      ctx.beginPath()
      ctx.moveTo(x, startY)
      ctx.lineTo(x, startY - chartHeight)
      ctx.stroke()
    })

    // –†–∏—Å—É–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–¥ –ª–∏–Ω–∏–µ–π (–≥—Ä–∞–¥–∏–µ–Ω—Ç)
    const gradient = ctx.createLinearGradient(0, startY - chartHeight, 0, startY)
    gradient.addColorStop(0, `${lineColor}20`)
    gradient.addColorStop(1, `${lineColor}05`)

    ctx.fillStyle = gradient
    ctx.beginPath()
    ctx.moveTo(startX, startY)

    lineData.forEach((point, index) => {
      const x = startX + (chartWidth / (lineData.length - 1)) * index
      const normalizedValue = (point.value - minValue) / valueRange
      const y = startY - chartHeight * normalizedValue

      if (index === 0) {
        ctx.lineTo(x, y)
      } else {
        ctx.lineTo(x, y)
      }
    })

    ctx.lineTo(startX + chartWidth, startY)
    ctx.closePath()
    ctx.fill()

    // –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–∏–Ω–∏—é
    ctx.strokeStyle = lineColor
    ctx.lineWidth = 3
    ctx.beginPath()

    lineData.forEach((point, index) => {
      const x = startX + (chartWidth / (lineData.length - 1)) * index
      const normalizedValue = (point.value - minValue) / valueRange
      const y = startY - chartHeight * normalizedValue

      if (index === 0) {
        ctx.moveTo(x, y)
      } else {
        ctx.lineTo(x, y)
      }
    })
    ctx.stroke()

    // –†–∏—Å—É–µ–º —Ç–æ—á–∫–∏
    lineData.forEach((point, index) => {
      const x = startX + (chartWidth / (lineData.length - 1)) * index
      const normalizedValue = (point.value - minValue) / valueRange
      const y = startY - chartHeight * normalizedValue

      // –í–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥ (–±–µ–ª—ã–π)
      ctx.fillStyle = isDark ? "#1f2937" : "#ffffff"
      ctx.beginPath()
      ctx.arc(x, y, 6, 0, 2 * Math.PI)
      ctx.fill()

      // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥ (—Ü–≤–µ—Ç–Ω–æ–π)
      ctx.fillStyle = pointColor
      ctx.beginPath()
      ctx.arc(x, y, 4, 0, 2 * Math.PI)
      ctx.fill()

      // –ü–æ–¥–ø–∏—Å–∏ –ø–æ X
      ctx.fillStyle = textColor
      ctx.font = "12px Arial"
      ctx.textAlign = "center"
      ctx.fillText(point.month, x, startY + 20)

      // –ó–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Ç–æ—á–∫–∞–º–∏
      ctx.fillStyle = isDark ? "#ffffff" : "#1f2937"
      ctx.font = "bold 11px Arial"
      ctx.fillText(`${point.value}%`, x, y - 12)
    })

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
    ctx.fillStyle = isDark ? "#ffffff" : "#1f2937"
    ctx.font = "bold 14px Arial"
    ctx.textAlign = "center"
    ctx.fillText("–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º (%)", canvas.offsetWidth / 2, 20)

    // –õ–µ–≥–µ–Ω–¥–∞
    ctx.fillStyle = textColor
    ctx.font = "12px Arial"
    ctx.textAlign = "left"
    ctx.fillText("üìà –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂", startX, canvas.offsetHeight - 10)
  }, [isDark])

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {/* Line Chart */}
      <Card
        className={`backdrop-blur-sm border-0 shadow-lg theme-transition ${
          isDark ? "bg-gray-800/80 border-gray-700" : "bg-white/80 border-gray-200"
        }`}
      >
        <CardHeader>
          <CardTitle className={`text-lg theme-transition ${isDark ? "text-white" : "text-gray-900"}`}>
            üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="relative">
            <canvas ref={lineChartRef} className="w-full h-64 cursor-pointer" style={{ maxWidth: "100%" }} />
          </div>
          <div className={`mt-4 text-sm theme-transition ${isDark ? "text-gray-400" : "text-gray-600"}`}>
            <p>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤</p>
            <div className="flex items-center mt-2 space-x-4">
              <div className="flex items-center">
                <div className="w-3 h-3 bg-[#0088CC] rounded-full mr-2"></div>
                <span>–õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞</span>
              </div>
              <div className="flex items-center">
                <div className="w-3 h-3 bg-[#34C759] rounded-full mr-2"></div>
                <span>–ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Pie Chart */}
      <Card
        className={`backdrop-blur-sm border-0 shadow-lg theme-transition ${
          isDark ? "bg-gray-800/80 border-gray-700" : "bg-white/80 border-gray-200"
        }`}
      >
        <CardHeader>
          <CardTitle className={`text-lg theme-transition ${isDark ? "text-white" : "text-gray-900"}`}>
            üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center">
            <div className="relative w-32 h-32">
              {/* –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ */}
              <div className="w-full h-full rounded-full border-8 border-[#0088CC] border-r-[#34C759] border-b-[#FF9500] border-l-[#0088CC] transform rotate-45"></div>
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="text-center">
                  <div className={`text-lg font-bold theme-transition ${isDark ? "text-white" : "text-gray-900"}`}>
                    100%
                  </div>
                  <div className={`text-xs theme-transition ${isDark ? "text-gray-400" : "text-gray-600"}`}>–í—Å–µ–≥–æ</div>
                </div>
              </div>
            </div>
          </div>
          <div className="mt-6 space-y-3">
            {pieData.map((item, index) => (
              <div key={index} className="flex items-center justify-between">
                <div className="flex items-center">
                  <div className="w-3 h-3 rounded-full mr-3" style={{ backgroundColor: item.color }}></div>
                  <span className={`text-sm theme-transition ${isDark ? "text-gray-300" : "text-gray-700"}`}>
                    {item.label}
                  </span>
                </div>
                <span className={`text-sm font-medium theme-transition ${isDark ? "text-white" : "text-gray-900"}`}>
                  {item.value}%
                </span>
              </div>
            ))}
          </div>
          <div className={`mt-4 text-xs theme-transition ${isDark ? "text-gray-400" : "text-gray-600"}`}>
            –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
